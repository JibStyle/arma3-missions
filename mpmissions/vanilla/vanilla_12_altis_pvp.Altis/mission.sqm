version=54;
class EditorData
{
	moveGridStep=1;
	angleGridStep=0.2617994;
	scaleGridStep=1;
	autoGroupingDist=10;
	toggles=513;
	mods[]=
	{
		"3denEnhanced"
	};
	class ItemIDProvider
	{
		nextID=6;
	};
	class LayerIndexProvider
	{
		nextID=1;
	};
	class Camera
	{
		pos[]={12540.763,213.38844,15764.733};
		dir[]={-0.081983596,-0.56908506,0.81820714};
		up[]={-0.056738872,0.82226908,0.56625706};
		aside[]={0.99503475,-1.8882565e-007,0.099702276};
	};
};
binarizationWanted=0;
sourceName="vanilla_12_altis_pvp";
addons[]=
{
	"A3_Modules_F_Multiplayer",
	"A3_Modules_F",
	"A3_Modules_F_Curator_Multiplayer"
};
class AddonsMetaData
{
	class List
	{
		items=2;
		class Item0
		{
			className="A3_Modules_F";
			name="Arma 3 Alpha - Scripted Modules";
			author="Bohemia Interactive";
			url="https://www.arma3.com";
		};
		class Item1
		{
			className="A3_Modules_F_Curator";
			name="Arma 3 Zeus Update - Scripted Modules";
			author="Bohemia Interactive";
			url="https://www.arma3.com";
		};
	};
};
randomSeed=1024219;
class ScenarioData
{
	author="JibStyle";
};
class CustomAttributes
{
	class Category0
	{
		name="Scenario";
		class Attribute0
		{
			property="EnableTargetDebug";
			expression="true";
			class Value
			{
				class data
				{
					singleType="SCALAR";
					value=1;
				};
			};
		};
		class Attribute1
		{
			property="EnableDebugConsole";
			expression="true";
			class Value
			{
				class data
				{
					singleType="SCALAR";
					value=1;
				};
			};
		};
		class Attribute2
		{
			property="ENH_SPR";
			expression="if (!is3DEN && _value # 0 > 0 && !isMultiplayer) then      {        ENH_SPR_Ruleset = _value param [0, 0];        ENH_SPR_Delay = _value param [1, 20];        ENH_SPR_CanDie = _value param [2, false];        ENH_SPR_RestoreLoadout = _value param [3, false];        ENH_SPR_OnRespawnCode = compile (_value param [4, '']);        ENH_SPR_Positions =        [          allMapMarkers select {'respawn_east' in toLower _x} apply {getMarkerPos _x},          allMapMarkers select {'respawn_west' in toLower _x} apply {getMarkerPos _x},          allMapMarkers select {'respawn_guerilla' in toLower _x} apply {getMarkerPos _x},          allMapMarkers select {'respawn_civilian' in toLower _x} apply {getMarkerPos _x}        ];        {          _x setVariable ['ENH_SPR_OriginalSide', side group _x];          _x setVariable ['ENH_SPR_OriginalLoadout', getUnitLoadout _x];          _x addEventHandler ['handleDamage',          {            params ['_unit', '', '_damage', '', '', '_index'];            if (!alive _unit || lifeState _unit isEqualTo 'INCAPACITATED') exitWith {0};            if (_unit getVariable ['ENH_SPR_Tickets', 0] == 0) then            {              _unit removeEventHandler ['handleDamage', _thisEventHandler];              _damage;            };            if (ENH_SPR_CanDie && _index in [1, 2] && _damage >= 1) exitWith            {              _unit removeEventHandler ['handleDamage', _thisEventHandler];              1;            };            if (_index < 8 && (_damage min 0.95) == 0.95) then            {              setAccTime 1;              _unit allowDamage false;              _unit setCaptive true;              _unit setUnconscious true;              _unit setVariable ['ENH_SPR_Tickets', (_unit getVariable ['ENH_SPR_Tickets', 0]) - 1];              if (isPlayer _unit) then {enableTeamSwitch false} else {removeSwitchableUnit _unit};              moveOut _unit;              _unit spawn ENH_fnc_SPR_respawnTimer;            };            _damage min 0.95;          }];        } forEach (allUnits select {_x getVariable ['ENH_SPR_Tickets', 0] > 0});                ENH_fnc_SPR_respawn =        {          scriptName 'ENH_Attribute_SPR_Respawn';          params ['_unit'];          if (isPlayer _unit) then {enableTeamSwitch true} else {addSwitchableUnit _unit};          if (ENH_SPR_RestoreLoadout) then {_unit setUnitLoadout (_unit getVariable 'ENH_SPR_OriginalLoadout')};          private _sideID = (_unit getVariable 'ENH_SPR_OriginalSide') call BIS_fnc_sideID;          private _positions = ENH_SPR_Positions select _sideID;          if (_positions isNotEqualTo []) then          {            switch (ENH_SPR_Ruleset) do            {              case 3:              {                _unit setPos (([_positions, [], {_unit distance _x}, 'ASCEND'] call BIS_fnc_sortBy) select 0);              };              case 2:              {                _unit setPos selectRandom _positions;              };            };          };          _unit setUnconscious false;          _unit allowDamage true;          _unit setDamage 0;          _unit switchMove '';          _unit call ENH_SPR_OnRespawnCode;          _unit spawn          {            sleep 8;            _this setCaptive false;          };        };                ENH_fnc_SPR_respawnTimer =        {          scriptName 'ENH_Attribute_SPR_RespawnTimer';          params ['_unit'];          private _respawnTime = time + ENH_SPR_Delay;          if (isPlayer _unit) then          {            private _ctrlRespawnTimer = (call BIS_fnc_displayMission) ctrlCreate ['RscStructuredText',-1];            _ctrlRespawnTimer ctrlSetPosition [0.25, 0, 0.5, 0.06];            _ctrlRespawnTimer ctrlSetBackgroundColor [0, 0, 0, 0.1];            _ctrlRespawnTimer ctrlCommit 0;            ENH_SPR_OriginalVolume = [soundVolume, musicVolume, radioVolume, speechVolume, environmentVolume];            0 cutText ['', 'BLACK OUT', 0.3];            0.3 fadeSound 0;            0.3 fadeMusic 0;            0.3 fadeRadio 0;            0.3 fadeSpeech 0;            0.3 fadeEnvironment 0;            showChat false;            while {time < _respawnTime} do            {              _ctrlRespawnTimer ctrlSetStructuredText parseText format ['<t size=''1.25'' color=''#218a36'' align=''center''>%1</t>', [(_respawnTime - time), 'HH:MM'] call BIS_fnc_timeToString];              sleep 0.1;            };            ctrlDelete _ctrlRespawnTimer;            0 cutText ['', 'BLACK IN', 8];            8 fadeSound (ENH_SPR_OriginalVolume # 0);            8 fadeMusic (ENH_SPR_OriginalVolume # 1);            8 fadeRadio (ENH_SPR_OriginalVolume # 2);            8 fadeSpeech (ENH_SPR_OriginalVolume # 3);            8 fadeEnvironment (ENH_SPR_OriginalVolume # 4);            showChat true;            [              ['Respawned'],              [format ['GRID: %1', mapGridPosition _unit]],              [format ['Tickets left: %1', _unit getVariable 'ENH_SPR_Tickets']]            ] spawn BIS_fnc_EXP_camp_SITREP;          }          else          {            private _respawnEH = -1;            if ((side player getFriend (_unit getVariable 'ENH_SPR_OriginalSide')) >= 0.6) then            {              _respawnEH = addMissionEventHandler              [                'draw3D',                {                  drawIcon3D ['\a3\Modules_f\data\portraitRespawn_ca.paa', [0.13, 0.54, 0.21, 0.8], ASLToAGL ((_thisArgs # 0) modelToWorldVisualWorld [0, 0, 1]), 1, 1, 0, str round ((_thisArgs # 1) - time), 2];                },                [_unit, _respawnTime]              ];            };            sleep ENH_SPR_Delay;            removeMissionEventHandler ['draw3D', _respawnEH];            [str _unit, 'onEachFrame'] call BIS_fnc_removeStackedEventHandler;          };          _unit call ENH_fnc_SPR_respawn;        };      }";
			class Value
			{
				class data
				{
					singleType="ARRAY";
					class value
					{
						items=5;
						class Item0
						{
							class data
							{
								singleType="SCALAR";
								value=0;
							};
						};
						class Item1
						{
							class data
							{
								singleType="SCALAR";
								value=20;
							};
						};
						class Item2
						{
							class data
							{
								singleType="BOOL";
								value=0;
							};
						};
						class Item3
						{
							class data
							{
								singleType="BOOL";
								value=0;
							};
						};
						class Item4
						{
							class data
							{
								singleType="STRING";
								value="";
							};
						};
					};
				};
			};
		};
		nAttributes=3;
	};
};
class Mission
{
	class Intel
	{
		timeOfChanges=1800.0002;
		startWeather=0.30000001;
		startWind=0.1;
		startWaves=0.1;
		forecastWeather=0.30000001;
		forecastWind=0.1;
		forecastWaves=0.1;
		forecastLightnings=0.1;
		wavesForced=1;
		windForced=1;
		year=2035;
		month=6;
		day=24;
		hour=12;
		minute=0;
		startFogDecay=0.014;
		forecastFogDecay=0.014;
	};
	class Entities
	{
		items=1;
		class Item0
		{
			dataType="Layer";
			name="Vanilla Sector Control";
			class Entities
			{
				items=4;
				class Item0
				{
					dataType="Logic";
					class PositionInfo
					{
						position[]={12523.356,19.299484,16037.336};
						angles[]={6.276361,0,6.2740746};
					};
					areaSize[]={50,-1,50};
					flags=1;
					id=4;
					type="ModuleSector_F";
					class CustomAttributes
					{
						class Attribute0
						{
							property="ModuleSector_F_DefaultOwner";
							expression="_this setVariable ['DefaultOwner',_value,true];";
							class Value
							{
								class data
								{
									singleType="STRING";
									value="-1";
								};
							};
						};
						class Attribute1
						{
							property="ModuleSector_F_CostInfantry";
							expression="_this setVariable ['CostInfantry',_value,true];";
							class Value
							{
								class data
								{
									singleType="STRING";
									value="1";
								};
							};
						};
						class Attribute2
						{
							property="ModuleSector_F_OnOwnerChange";
							expression="_this setVariable ['OnOwnerChange',_value,true];";
							class Value
							{
								class data
								{
									singleType="STRING";
									value="";
								};
							};
						};
						class Attribute3
						{
							property="ModuleSector_F_ScoreReward";
							expression="_this setVariable ['ScoreReward',_value,true];";
							class Value
							{
								class data
								{
									singleType="STRING";
									value="";
								};
							};
						};
						class Attribute4
						{
							property="ModuleSector_F_CostWheeled";
							expression="_this setVariable ['CostWheeled',_value,true];";
							class Value
							{
								class data
								{
									singleType="STRING";
									value="2";
								};
							};
						};
						class Attribute5
						{
							property="ModuleSector_F_OwnerLimit";
							expression="_this setVariable ['OwnerLimit',_value,true];";
							class Value
							{
								class data
								{
									singleType="STRING";
									value="0";
								};
							};
						};
						class Attribute6
						{
							property="ModuleSector_F_TaskTitle";
							expression="_this setVariable ['TaskTitle',_value,true];";
							class Value
							{
								class data
								{
									singleType="STRING";
									value="Capture Xray";
								};
							};
						};
						class Attribute7
						{
							property="ModuleSector_F_Designation";
							expression="_this setVariable ['Designation',_value,true];";
							class Value
							{
								class data
								{
									singleType="STRING";
									value="";
								};
							};
						};
						class Attribute8
						{
							property="ModuleSector_F_TaskOwner";
							expression="_this setVariable ['TaskOwner',_value,true];";
							class Value
							{
								class data
								{
									singleType="STRING";
									value="1";
								};
							};
						};
						class Attribute9
						{
							property="ModuleSector_F_CostAir";
							expression="_this setVariable ['CostAir',_value,true];";
							class Value
							{
								class data
								{
									singleType="STRING";
									value="2";
								};
							};
						};
						class Attribute10
						{
							property="ModuleSector_F_CostPlayers";
							expression="_this setVariable ['CostPlayers',_value,true];";
							class Value
							{
								class data
								{
									singleType="STRING";
									value="2";
								};
							};
						};
						class Attribute11
						{
							property="ModuleSector_F_CostTracked";
							expression="_this setVariable ['CostTracked',_value,true];";
							class Value
							{
								class data
								{
									singleType="STRING";
									value="4";
								};
							};
						};
						class Attribute12
						{
							property="ModuleSector_F_TaskDescription";
							expression="_this setVariable ['TaskDescription',_value,true];";
							class Value
							{
								class data
								{
									singleType="STRING";
									value="";
								};
							};
						};
						class Attribute13
						{
							property="ModuleSector_F_CostWater";
							expression="_this setVariable ['CostWater',_value,true];";
							class Value
							{
								class data
								{
									singleType="STRING";
									value="0";
								};
							};
						};
						class Attribute14
						{
							property="ModuleSector_F_Name";
							expression="_this setVariable ['Name',_value,true];";
							class Value
							{
								class data
								{
									singleType="STRING";
									value="Xray";
								};
							};
						};
						nAttributes=15;
					};
				};
				class Item1
				{
					dataType="Logic";
					class PositionInfo
					{
						position[]={12531.356,19.276875,16037.336};
						angles[]={6.2740898,0,6.2695355};
					};
					id=0;
					type="SideBLUFOR_F";
				};
				class Item2
				{
					dataType="Logic";
					class PositionInfo
					{
						position[]={12515.356,19.35568,16037.336};
						angles[]={0.0022640675,0,6.2695355};
					};
					id=1;
					type="SideOPFOR_F";
				};
				class Item3
				{
					dataType="Logic";
					class PositionInfo
					{
						position[]={12523.356,19.536137,16045.336};
						angles[]={6.2718124,0,0.011372928};
					};
					id=2;
					type="ModuleBleedTickets_F";
					class CustomAttributes
					{
						class Attribute0
						{
							property="ModuleBleedTickets_F_ticketBleedRatio";
							expression="_this setVariable ['ticketBleedRatio',_value,true];";
							class Value
							{
								class data
								{
									singleType="SCALAR";
									value=0.5;
								};
							};
						};
						class Attribute1
						{
							property="ModuleBleedTickets_F_ticketBleedMax";
							expression="_this setVariable ['ticketBleedMax',_value,true];";
							class Value
							{
								class data
								{
									singleType="SCALAR";
									value=3;
								};
							};
						};
						class Attribute2
						{
							property="ModuleBleedTickets_F_delay";
							expression="_this setVariable ['delay',_value,true];";
							class Value
							{
								class data
								{
									singleType="SCALAR";
									value=5;
								};
							};
						};
						nAttributes=3;
					};
				};
			};
			id=5;
			atlOffset=0.01414299;
		};
	};
	class Connections
	{
		class LinkIDProvider
		{
			nextID=4;
		};
		class Links
		{
			items=4;
			class Item0
			{
				linkID=0;
				item0=1;
				item1=4;
				class CustomData
				{
					type="Sync";
				};
			};
			class Item1
			{
				linkID=1;
				item0=0;
				item1=4;
				class CustomData
				{
					type="Sync";
				};
			};
			class Item2
			{
				linkID=2;
				item0=1;
				item1=2;
				class CustomData
				{
					type="Sync";
				};
			};
			class Item3
			{
				linkID=3;
				item0=0;
				item1=2;
				class CustomData
				{
					type="Sync";
				};
			};
		};
	};
};
