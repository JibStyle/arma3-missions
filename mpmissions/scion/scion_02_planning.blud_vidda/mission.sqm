version=54;
class EditorData
{
	moveGridStep=1;
	angleGridStep=0.2617994;
	scaleGridStep=1;
	autoGroupingDist=10;
	toggles=1;
	mods[]=
	{
		"3denEnhanced"
	};
	class ItemIDProvider
	{
		nextID=21;
	};
	class MarkerIDProvider
	{
		nextID=15;
	};
	class Camera
	{
		pos[]={11737.041,182.79918,11898.037};
		dir[]={0.77926159,-0.59269375,-0.20369861};
		up[]={0.57343012,0.80542827,-0.14989428};
		aside[]={-0.25290489,-1.2124656e-007,-0.96750844};
	};
};
binarizationWanted=0;
sourceName="scion_02_planning";
addons[]=
{
	"A3_Ui_F",
	"sc_units"
};
class AddonsMetaData
{
	class List
	{
		items=2;
		class Item0
		{
			className="A3_Ui_F";
			name="Arma 3 - User Interface";
			author="Bohemia Interactive";
			url="https://www.arma3.com";
		};
		class Item1
		{
			className="sc_units";
			name="sc_units";
			author="Scion Conflict Mod Team";
			url="https://steamcommunity.com/sharedfiles/filedetails/?id=2478080991";
		};
	};
};
randomSeed=6468487;
class ScenarioData
{
	author="JibStyle";
	disabledAI=1;
	respawn=3;
	respawnDelay=1;
	class Header
	{
		gameType="Coop";
	};
};
class CustomAttributes
{
	class Category0
	{
		name="Multiplayer";
		class Attribute0
		{
			property="ENH_dynamicSkill";
			expression="if (!is3DEN && _value # 0 && isServer) then      {        _value params        [          '_enable',          '_skillMinBLUFOR',          '_skillAimMinBLUFOR',          '_skillMaxBLUFOR',          '_skillAimMaxBlUFOR',          '_skillMinOPFOR',          '_skillAimMinOPFOR',          '_skillMaxOPFOR',          '_skillAimMaxOPFOR',          '_skillMinIndependent',          '_skillAimMinIndependent',          '_skillMaxIndependent',          '_skillAimMaxIndependent'        ];        [          true,          [            [WEST, _skillMinBLUFOR, _skillAimMinBLUFOR, _skillMaxBLUFOR, _skillAimMaxBlUFOR],            [EAST, _skillMinOPFOR, _skillAimMinOPFOR, _skillMaxOPFOR, _skillAimMaxOPFOR],            [INDEPENDENT, _skillMinIndependent, _skillAimMinIndependent, _skillMaxIndependent, _skillAimMaxIndependent]          ]        ] call BIS_fnc_EXP_camp_dynamicAISkill;      }";
			class Value
			{
				class data
				{
					singleType="ARRAY";
					class value
					{
						items=13;
						class Item0
						{
							class data
							{
								singleType="BOOL";
								value=0;
							};
						};
						class Item1
						{
							class data
							{
								singleType="SCALAR";
								value=0.5;
							};
						};
						class Item2
						{
							class data
							{
								singleType="SCALAR";
								value=0.30000001;
							};
						};
						class Item3
						{
							class data
							{
								singleType="SCALAR";
								value=0.80000001;
							};
						};
						class Item4
						{
							class data
							{
								singleType="SCALAR";
								value=0.5;
							};
						};
						class Item5
						{
							class data
							{
								singleType="SCALAR";
								value=0.5;
							};
						};
						class Item6
						{
							class data
							{
								singleType="SCALAR";
								value=0.30000001;
							};
						};
						class Item7
						{
							class data
							{
								singleType="SCALAR";
								value=0.80000001;
							};
						};
						class Item8
						{
							class data
							{
								singleType="SCALAR";
								value=0.5;
							};
						};
						class Item9
						{
							class data
							{
								singleType="SCALAR";
								value=0.5;
							};
						};
						class Item10
						{
							class data
							{
								singleType="SCALAR";
								value=0.30000001;
							};
						};
						class Item11
						{
							class data
							{
								singleType="SCALAR";
								value=0.80000001;
							};
						};
						class Item12
						{
							class data
							{
								singleType="SCALAR";
								value=0.5;
							};
						};
					};
				};
			};
		};
		class Attribute1
		{
			property="ENH_saveLoadout";
			expression="if (!isMultiplayer || !_value || is3DEN || !hasInterface) exitWith {};    [] spawn    {      waitUntil {sleep 1; !isNull player};      player setVariable ['ENH_savedLoadout', getUnitloadout player];      player addMPEventHandler ['MPRespawn',      {        params ['_unit'];        private _loadout = _unit getVariable ['ENH_savedLoadout', []];        if (_loadout isNotEqualTo []) then {_unit setUnitLoadout _loadout};      }];    };";
			class Value
			{
				class data
				{
					singleType="BOOL";
					value=1;
				};
			};
		};
		class Attribute2
		{
			property="RespawnTemplates";
			expression="true";
			class Value
			{
				class data
				{
					singleType="ARRAY";
					class value
					{
						items=1;
						class Item0
						{
							class data
							{
								singleType="STRING";
								value="Counter";
							};
						};
					};
				};
			};
		};
		nAttributes=3;
	};
	class Category1
	{
		name="Scenario";
		class Attribute0
		{
			property="EnableTargetDebug";
			expression="true";
			class Value
			{
				class data
				{
					singleType="SCALAR";
					value=1;
				};
			};
		};
		class Attribute1
		{
			property="EnableDebugConsole";
			expression="true";
			class Value
			{
				class data
				{
					singleType="SCALAR";
					value=1;
				};
			};
		};
		class Attribute2
		{
			property="ENH_SPR";
			expression="if (!is3DEN && _value # 0 > 0 && !isMultiplayer) then      {        ENH_SPR_Ruleset = _value param [0, 0];        ENH_SPR_Delay = _value param [1, 20];        ENH_SPR_CanDie = _value param [2, false];        ENH_SPR_RestoreLoadout = _value param [3, false];        ENH_SPR_OnRespawnCode = compile (_value param [4, '']);        ENH_SPR_Positions =        [          allMapMarkers select {'respawn_east' in toLower _x} apply {getMarkerPos _x},          allMapMarkers select {'respawn_west' in toLower _x} apply {getMarkerPos _x},          allMapMarkers select {'respawn_guerilla' in toLower _x} apply {getMarkerPos _x},          allMapMarkers select {'respawn_civilian' in toLower _x} apply {getMarkerPos _x}        ];        {          _x setVariable ['ENH_SPR_OriginalSide', side group _x];          _x setVariable ['ENH_SPR_OriginalLoadout', getUnitLoadout _x];          _x addEventHandler ['handleDamage',          {            params ['_unit', '', '_damage', '', '', '_index'];            if (!alive _unit || lifeState _unit isEqualTo 'INCAPACITATED') exitWith {0};            if (_unit getVariable ['ENH_SPR_Tickets', 0] == 0) then            {              _unit removeEventHandler ['handleDamage', _thisEventHandler];              _damage;            };            if (ENH_SPR_CanDie && _index in [1, 2] && _damage >= 1) exitWith            {              _unit removeEventHandler ['handleDamage', _thisEventHandler];              1;            };            if (_index < 8 && (_damage min 0.95) == 0.95) then            {              setAccTime 1;              _unit allowDamage false;              _unit setCaptive true;              _unit setUnconscious true;              _unit setVariable ['ENH_SPR_Tickets', (_unit getVariable ['ENH_SPR_Tickets', 0]) - 1];              if (isPlayer _unit) then {enableTeamSwitch false} else {removeSwitchableUnit _unit};              moveOut _unit;              _unit spawn ENH_fnc_SPR_respawnTimer;            };            _damage min 0.95;          }];        } forEach (allUnits select {_x getVariable ['ENH_SPR_Tickets', 0] > 0});                ENH_fnc_SPR_respawn =        {          scriptName 'ENH_Attribute_SPR_Respawn';          params ['_unit'];          if (isPlayer _unit) then {enableTeamSwitch true} else {addSwitchableUnit _unit};          if (ENH_SPR_RestoreLoadout) then {_unit setUnitLoadout (_unit getVariable 'ENH_SPR_OriginalLoadout')};          private _sideID = (_unit getVariable 'ENH_SPR_OriginalSide') call BIS_fnc_sideID;          private _positions = ENH_SPR_Positions select _sideID;          if (_positions isNotEqualTo []) then          {            switch (ENH_SPR_Ruleset) do            {              case 3:              {                _unit setPos (([_positions, [], {_unit distance _x}, 'ASCEND'] call BIS_fnc_sortBy) select 0);              };              case 2:              {                _unit setPos selectRandom _positions;              };            };          };          _unit setUnconscious false;          _unit allowDamage true;          _unit setDamage 0;          _unit switchMove '';          _unit call ENH_SPR_OnRespawnCode;          _unit spawn          {            sleep 8;            _this setCaptive false;          };        };                ENH_fnc_SPR_respawnTimer =        {          scriptName 'ENH_Attribute_SPR_RespawnTimer';          params ['_unit'];          private _respawnTime = time + ENH_SPR_Delay;          if (isPlayer _unit) then          {            private _ctrlRespawnTimer = (call BIS_fnc_displayMission) ctrlCreate ['RscStructuredText',-1];            _ctrlRespawnTimer ctrlSetPosition [0.25, 0, 0.5, 0.06];            _ctrlRespawnTimer ctrlSetBackgroundColor [0, 0, 0, 0.1];            _ctrlRespawnTimer ctrlCommit 0;            ENH_SPR_OriginalVolume = [soundVolume, musicVolume, radioVolume, speechVolume, environmentVolume];            0 cutText ['', 'BLACK OUT', 0.3];            0.3 fadeSound 0;            0.3 fadeMusic 0;            0.3 fadeRadio 0;            0.3 fadeSpeech 0;            0.3 fadeEnvironment 0;            showChat false;            while {time < _respawnTime} do            {              _ctrlRespawnTimer ctrlSetStructuredText parseText format ['<t size=''1.25'' color=''#218a36'' align=''center''>%1</t>', [(_respawnTime - time), 'HH:MM'] call BIS_fnc_timeToString];              sleep 0.1;            };            ctrlDelete _ctrlRespawnTimer;            0 cutText ['', 'BLACK IN', 8];            8 fadeSound (ENH_SPR_OriginalVolume # 0);            8 fadeMusic (ENH_SPR_OriginalVolume # 1);            8 fadeRadio (ENH_SPR_OriginalVolume # 2);            8 fadeSpeech (ENH_SPR_OriginalVolume # 3);            8 fadeEnvironment (ENH_SPR_OriginalVolume # 4);            showChat true;            [              ['Respawned'],              [format ['GRID: %1', mapGridPosition _unit]],              [format ['Tickets left: %1', _unit getVariable 'ENH_SPR_Tickets']]            ] spawn BIS_fnc_EXP_camp_SITREP;          }          else          {            private _respawnEH = -1;            if ((side player getFriend (_unit getVariable 'ENH_SPR_OriginalSide')) >= 0.6) then            {              _respawnEH = addMissionEventHandler              [                'draw3D',                {                  drawIcon3D ['\a3\Modules_f\data\portraitRespawn_ca.paa', [0.13, 0.54, 0.21, 0.8], ASLToAGL ((_thisArgs # 0) modelToWorldVisualWorld [0, 0, 1]), 1, 1, 0, str round ((_thisArgs # 1) - time), 2];                },                [_unit, _respawnTime]              ];            };            sleep ENH_SPR_Delay;            removeMissionEventHandler ['draw3D', _respawnEH];            [str _unit, 'onEachFrame'] call BIS_fnc_removeStackedEventHandler;          };          _unit call ENH_fnc_SPR_respawn;        };      }";
			class Value
			{
				class data
				{
					singleType="ARRAY";
					class value
					{
						items=5;
						class Item0
						{
							class data
							{
								singleType="SCALAR";
								value=0;
							};
						};
						class Item1
						{
							class data
							{
								singleType="SCALAR";
								value=20;
							};
						};
						class Item2
						{
							class data
							{
								singleType="BOOL";
								value=0;
							};
						};
						class Item3
						{
							class data
							{
								singleType="BOOL";
								value=0;
							};
						};
						class Item4
						{
							class data
							{
								singleType="STRING";
								value="";
							};
						};
					};
				};
			};
		};
		nAttributes=3;
	};
};
class Mission
{
	class Intel
	{
		timeOfChanges=1800.0002;
		startWeather=0.50999999;
		startFog=0.015;
		startWind=0.1;
		startWaves=0.1;
		forecastWeather=0.50999999;
		forecastFog=0.02;
		forecastWind=0.1;
		forecastWaves=0.1;
		forecastLightnings=0.1;
		wavesForced=1;
		windForced=1;
		year=2018;
		day=28;
		hour=9;
		minute=0;
		startFogDecay=0.014;
		forecastFogDecay=0.014;
	};
	class Entities
	{
		items=16;
		class Item0
		{
			dataType="Marker";
			position[]={10852.192,251.438,9229.251};
			name="marker_0";
			text="Power Station";
			type="mil_objective";
			id=0;
			atlOffset=-7.6293945e-005;
		};
		class Item1
		{
			dataType="Marker";
			position[]={2436.636,252.81,11524.78};
			name="marker_1";
			text="Distribution Center";
			type="mil_objective";
			id=1;
		};
		class Item2
		{
			dataType="Marker";
			position[]={1714.9436,310.15024,4349.0293};
			name="marker_2";
			text="Mining";
			type="mil_objective";
			id=2;
		};
		class Item3
		{
			dataType="Marker";
			position[]={6480.1821,234.817,6475.3848};
			name="marker_3";
			text="Military";
			type="mil_objective";
			id=3;
			atlOffset=-7.6293945e-005;
		};
		class Item4
		{
			dataType="Marker";
			position[]={9363.9766,194.56599,4273.9941};
			name="marker_4";
			text="Big LZ";
			type="mil_objective";
			id=4;
			atlOffset=-0.0001373291;
		};
		class Item5
		{
			dataType="Marker";
			position[]={10101.882,305.28101,4496.1992};
			name="marker_5";
			text="OP";
			type="mil_objective";
			id=5;
			atlOffset=0.00033569336;
		};
		class Item6
		{
			dataType="Marker";
			position[]={3967.834,231.75,7130.0898};
			name="marker_6";
			text="Depot";
			type="mil_objective";
			id=6;
		};
		class Item7
		{
			dataType="Marker";
			position[]={8198.0156,230.80099,4967.2861};
			name="marker_7";
			text="Clear Area";
			type="mil_objective";
			id=9;
			atlOffset=0.00024414063;
		};
		class Item8
		{
			dataType="Marker";
			position[]={10313.573,199.645,10743.366};
			name="marker_8";
			text="Empty";
			type="mil_objective";
			id=10;
			atlOffset=0.0004119873;
		};
		class Item9
		{
			dataType="Marker";
			position[]={7240.562,239.325,9570.4648};
			name="marker_9";
			text="Research Base";
			type="mil_objective";
			id=11;
			atlOffset=-0.00035095215;
		};
		class Item10
		{
			dataType="Marker";
			position[]={6398.4419,262.742,9553.3828};
			name="marker_10";
			text="OP";
			type="mil_objective";
			id=12;
			atlOffset=0.00036621094;
		};
		class Item11
		{
			dataType="Marker";
			position[]={7204.4961,207.25999,11429.161};
			name="marker_11";
			text="Border Checkpoint";
			type="mil_objective";
			id=13;
		};
		class Item12
		{
			dataType="Marker";
			position[]={11745.655,180.293,11914.692};
			name="marker_12";
			text="Quarry Black Site";
			type="mil_objective";
			id=14;
			atlOffset=0.00030517578;
		};
		class Item13
		{
			dataType="Marker";
			position[]={11460.007,220.826,10558.706};
			name="marker_13";
			text="Comms";
			type="mil_objective";
			id=15;
			atlOffset=0.00032043457;
		};
		class Item14
		{
			dataType="Group";
			side="West";
			class Entities
			{
				items=1;
				class Item0
				{
					dataType="Object";
					class PositionInfo
					{
						position[]={11737.669,181.03214,11896.599};
						angles[]={0,5.2635698,-0};
					};
					side="West";
					flags=7;
					class Attributes
					{
						isPlayer=1;
					};
					id=19;
					type="SC_AR_Arctic_Rifleman_H";
					atlOffset=-6.1035156e-005;
				};
			};
			class Attributes
			{
			};
			id=18;
			atlOffset=-6.1035156e-005;
		};
		class Item15
		{
			dataType="Marker";
			position[]={11739.514,181.16299,11896.759};
			name="respawn";
			type="respawn_inf";
			id=20;
			atlOffset=-0.0001373291;
		};
	};
};
